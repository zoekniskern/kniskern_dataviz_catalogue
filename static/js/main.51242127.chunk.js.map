{"version":3,"sources":["datasets/CoffeesPerDay.csv","datasets/CoffeeWake.csv","About.js","charts/BarChart.js","charts/LineChart.js","charts/ScatterPlot.js","charts/ForceDirect.js","charts/ChordDiagram.js","Chartview.js","Catalogue.js","Header.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","className","Component","BarChart","this","drawBarChart","parseTime","d3","props","data","row","coffees","parseInt","date_time","then","dataset","w","window","innerWidth","h","coffeeMax","d","dateMin","dateMax","xScale","domain","range","yScale","svg","append","attr","barWidth","Math","floor","length","selectAll","enter","text","concat","xAxis","ticks","scale","call","yAxis","id","LineChart","drawLineChart","i","lineData","j","datum","sleep","random","date","Date","console","log","push","name","tickFormat","colors","line","x","y","ScatterPlot","drawScatterChart","parseFloat","wake_time","coffeeMin","wakeMin","wakeMax","rangeRound","rScale","ForceDirect","drawForceDirect","source","target","force","distance","edges","classed","nodes","style","on","active","alphaTarget","restart","fx","fy","ChordDiagram","drawChordDiagram","outerRadius","min","innerRadius","formatValue","chord","padAngle","sortSubgroups","arc","ribbon","radius","color","chords","group","groups","index","darker","groupTick","step","k","endAngle","startAngle","value","map","angle","groupTicks","PI","filter","Chartview","state","width","height","param","charts_BarChart","bardata","charts_LineChart","charts_ScatterPlot","scatterdata","charts_ForceDirect","forcedata","charts_ChordDiagram","chart","charttype","switchChart","summary","marks","channels","analysis","sources","key","href","Catalogue","HashRouter","allcharts","path","replace","NavLink","to","Route","render","_ref","src_Chartview","Object","assign","isAuthed","Header","src","alt","exact","component","App","state2","data2","src_Header","ReactDOM","src_App_0","document","getElementById"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uqnBCmCvBC,mLA7BX,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,8CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,qBAA0CH,EAAAC,EAAAC,cAAA,kBAA1C,oCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,iBACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,8TAEJH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,mBACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iaAEJH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,cACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,mOAtBFC,qCCuGLC,8LAnGPC,KAAKC,sDAKL,IAAIC,EAAYC,IAAa,qBAG7BA,IAAOH,KAAKI,MAAMC,KAAM,SAACC,GACrB,MAAO,CACPC,QAASC,SAASF,EAAIC,SACtBE,UAAWP,EAAUI,EAAIG,cAE1BC,KAAK,SAACC,GAML,IAAMC,EAAIC,OAAOC,WAA+B,GAAlBD,OAAOC,WAAgB,IAC/CC,EAAIF,OAAOC,WAA+B,IAAlBD,OAAOC,WAAiB,IAIlDE,EAAYb,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAEV,UACrCW,EAAUf,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAER,YACnCU,EAAUhB,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAER,YAGnCW,EAASjB,MACIkB,OAAO,CAACH,EAASC,IACjBG,MAAM,CAAC,GAAIV,EAAI,KAI5BW,EAASpB,MACIkB,OAAO,CAAC,EAAGL,IACXM,MAAM,CAACP,EAAI,GAAI,KAI5BS,EAAMrB,IAAU,UACPsB,OAAO,OACPC,KAAK,QAASd,GACdc,KAAK,SAAUX,GAExBY,EAAWC,KAAKC,OAAOjB,EAAI,IAAMD,EAAQmB,QAAU,EAEvDN,EAAIO,UAAU,QACT1B,KAAKM,GACLqB,QACAP,OAAO,QACPC,KAAK,IAAK,SAACT,GAAD,OAAOG,EAAOH,EAAER,aAC1BiB,KAAK,IAAK,SAACT,GAAD,OAAOM,EAAON,EAAEV,WAC1BmB,KAAK,QAASC,GACdD,KAAK,SAAU,SAACT,GAAD,OAAQF,EAAI,GAAMQ,EAAON,EAAEV,WAC1CmB,KAAK,OAAQ,WACbA,KAAK,YATV,mBAWAF,EAAIO,UAAU,QACT1B,KAAKM,GACLqB,QACAP,OAAO,QACPC,KAAK,cAAe,UACpBA,KAAK,YAAa,QAClBA,KAAK,IAAK,SAACT,GAAD,OAAOG,EAAOH,EAAER,WAAckB,EAAW,IACnDD,KAAK,IAAK,SAACT,GAAD,OAAOM,EAAON,EAAEV,SAAW,IACrC0B,KAAK,SAAChB,GAAD,SAAAiB,OAAUjB,EAAEV,WACjBmB,KAAK,YATV,mBAaA,IAAIS,EAAQhC,MACKiC,MAAM,GACNC,MAAMjB,GAEvBI,EAAIC,OAAO,KACNC,KAAK,QAAQ,QACbA,KAAK,YAFV,gBAAAQ,OAEuCnB,EAAI,GAF3C,MAGKuB,KAAKH,GAGV,IAAII,EAAQpC,MACKkC,MAAMd,GAEvBC,EAAIC,OAAO,KACNC,KAAK,QAAQ,QACbA,KAAK,YAFV,mBAGKY,KAAKC,sCAMd,OAAO7C,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,oBAlGA1C,aCqHR2C,8LAjHPzC,KAAK0C,wDA2BL,IAtBA,IAAI/B,EAAU,GAsBNgC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE3B,IADA,IAAIC,EAAW,GACPC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvB,IAAIC,EAAQ,CACZC,MAAO,EAAoB,GAAhBnB,KAAKoB,SAChBC,KAAM,IAAIC,KAAK,KAAML,IAErBM,QAAQC,IAAIN,EAAMG,MAClBL,EAASS,KAAKP,GAElB,IAAIA,EAAQ,CACRQ,KAAI,UAAApB,OAAYS,GAChBC,SAAUA,GAEdjC,EAAQ0C,KAAKP,GAGbK,QAAQC,IAAIzC,GAMZ,IAAMC,EAAIC,OAAOC,WAA+B,GAAlBD,OAAOC,WAAgB,IAC/CC,EAAIF,OAAOC,WAA+B,IAAlBD,OAAOC,WAAiB,IAGlDU,EAAMrB,IAAU,UACPsB,OAAO,OACPC,KAAK,QAASd,GACdc,KAAK,SAAUX,GAExBK,EAASjB,MAERkB,OAAOlB,IAAUQ,EAAQ,GAAGiC,SAAU,SAAA3B,GAAC,OAAIA,EAAEgC,QAC7C3B,MAAM,CAAC,GAAIV,EAAI,KAEhBW,EAASpB,MAERkB,OAAO,CAAC,EAAG,KACXC,MAAM,CAACP,EAAI,GAAI,KAIhBoB,EAAQhC,IAAciB,GACrBmC,WAAWpD,IAAc,UAM1BoC,GAJaf,EAAIC,OAAO,KACvBC,KAAK,YADO,gBAAAQ,OACsBnB,EAAI,GAD1B,MAEZuB,KAAKH,GAEEhC,IAAYoB,IAKpBiC,GAJahC,EAAIC,OAAO,KACrBC,KAAK,YADK,oBAEVY,KAAKC,GAECpC,MACNkB,OAAO,CAAC,OAAQ,SAAU,SAC1BC,MAAM,CAAC,UAAW,UAAY,aAQjCmC,EAAOtD,MACNuD,EAAE,SAASzC,GAAK,OAAOG,EAAOH,EAAEgC,QAChCU,EAAE,SAAS1C,GAAK,OAAOM,EAAON,EAAE8B,SAErCvB,EAAIO,UAAU,SACT1B,KAAKM,GACLqB,QACAP,OAAO,QACHC,KAAK,QAAS,QACdA,KAAK,SAAU,SAACT,EAAE0B,GAAH,OAASa,EAAOb,KAC/BjB,KAAK,IAAK,SAAAT,GAAC,OAAIwC,EAAKxC,EAAE2B,6CAK/B,OAAOlD,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,sBAhHC1C,aCoGT8D,8LAhGP5D,KAAK6D,8DASL1D,IAAOH,KAAKI,MAAMC,KAAM,SAACC,GACrB,MAAO,CACHC,QAASuD,WAAWxD,EAAIC,SACxBwD,UAAWD,WAAWxD,EAAIyD,cAE/BrD,KAAK,SAACC,GAML,IAAMC,EAAIC,OAAOC,WAA+B,GAAlBD,OAAOC,WAAgB,IAC/CC,EAAIF,OAAOC,WAA+B,IAAlBD,OAAOC,WAAiB,IAGlDkD,EAAY7D,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAEV,UACrCS,EAAYb,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAEV,UACrC0D,EAAU9D,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAE8C,YACnCG,EAAU/D,IAAOQ,EAAS,SAACM,GAAD,OAAOA,EAAE8C,YAEnC3C,EAASjB,MACNkB,OAAO,CAAC2C,EAAY,IAAKhD,EAAY,KACrCmD,WAAW,CAAC,GAAIvD,EAAI,KAEvBW,EAASpB,MACAkB,OAAO,CAAC4C,EAASC,IACjBC,WAAW,CAACpD,EAAI,GAAI,KAE7BqD,EAASjE,MACAkB,OAAO,CAAC,EAAGL,IACXM,MAAM,CAAC,EAAE,IAGlBE,EAAMrB,IAAU,UACPsB,OAAO,OACPC,KAAK,QAASd,GACdc,KAAK,SAAUX,GAE5BS,EAAIO,UAAU,UACT1B,KAAKM,GACLqB,QACAP,OAAO,UACPC,KAAK,KAAM,SAACT,GAAD,OAAOG,EAAOH,EAAEV,WAC3BmB,KAAK,KAAM,SAACT,GAAD,OAAOM,EAAON,EAAE8C,aAC3BrC,KAAK,OAAQ,WACbA,KAAK,IAAK,SAACT,GAAD,OAAOmD,EAAOnD,EAAEV,WAG/BiB,EAAIO,UAAU,QACT1B,KAAKM,GACLqB,QACAP,OAAO,QACPC,KAAK,cAAe,UACpBA,KAAK,YAAa,IAClBA,KAAK,IAAK,SAACT,GAAD,OAAOG,EAAOH,EAAEV,WAC1BmB,KAAK,IAAK,SAACT,GAAD,OAAOM,EAAON,EAAE8C,WAAa,IACvC9B,KAAK,SAAChB,GAAD,UAAAiB,OAAWjB,EAAEV,QAAb,KAAA2B,OAAwBjB,EAAE8C,UAA1B,OAIV,IAAI5B,EAAQhC,MACKiC,MAAM,GACNC,MAAMjB,GAEvBI,EAAIC,OAAO,KACNC,KAAK,QAAQ,QACbA,KAAK,YAFV,gBAAAQ,OAEuCnB,EAAI,GAF3C,MAGKuB,KAAKH,GAGV,IAAII,EAAQpC,MACKkC,MAAMd,GAEvBC,EAAIC,OAAO,KACNC,KAAK,QAAQ,QACbA,KAAK,YAFV,mBAGKY,KAAKC,sCAMd,OAAO7C,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,uBA/FG1C,8BCgJXuE,8LA5IPrE,KAAKsE,4DAkCL,IAAI3D,EACO,CACL,CAAC2C,KAAM,aACP,CAACA,KAAM,SACP,CAACA,KAAM,UACP,CAACA,KAAM,SACP,CAACA,KAAM,aACP,CAACA,KAAM,OACP,CAACA,KAAM,QACP,CAACA,KAAM,SACP,CAACA,KAAM,SAVT3C,EAYO,CACL,CAAE4D,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,GACrB,CAAED,OAAQ,EAAGC,OAAQ,IAIrB5D,EAAIC,OAAOC,WAA+B,GAAlBD,OAAOC,WAAkC,IAAlBD,OAAOC,WACtDC,EAAIH,EAGNY,EAAMrB,IAAU,UACPsB,OAAO,OACPC,KAAK,QAASd,GACdc,KAAK,SAAUX,GACfW,KAAK,YAAa,QAM3B+C,EAAQtE,IAAmBQ,GACd8D,MAAM,SAAUtE,OAChBsE,MAAM,OAAQtE,IAAaQ,GACX+D,SAJV,MAKND,MAAM,SAAUtE,MACAuD,EAAE9C,EAAE,GACJ+C,EAAE5C,EAAE,IAMjC4D,EAAQnD,EAAIO,UAAU,QACT1B,KAAKM,GACLqB,QACAP,OAAO,QACPmD,QAAQ,QAAQ,GAE7BC,EAAQrD,EAAIO,UAAU,UACT1B,KAAKM,GACLqB,QACAP,OAAO,UACPC,KAAK,IAAK,IACVoD,MAAM,OAAQ,SAAC7D,EAAE0B,GAAH,OAAUA,EAAI,EAAK,UAAY,YAC7CL,KAAKnC,MACG4E,GAAG,QA5F5B,SAAqB9D,GACbd,IAAS6E,QACbP,EAAMQ,YAAY,IAAKC,UAGvBjE,EAAEkE,GAAKlE,EAAEyC,EACTzC,EAAEmE,GAAKnE,EAAE0C,IAuFYoB,GAAG,OApF5B,SAAgB9D,GAEZA,EAAEkE,GAAKhF,IAASuD,EAChBzC,EAAEmE,GAAKjF,IAASwD,IAkFKoB,GAAG,MA/E5B,SAAmB9D,GACXd,IAAS6E,QACbP,EAAMQ,YAAY,GAAGC,UAGrBjE,EAAEkE,GAAK,KACPlE,EAAEmE,GAAK,QA4EXP,EAAMpD,OAAO,SACRmD,QAAQ,cAAc,GACtB3C,KAAK,SAAShB,GAAK,OAAOA,EAAEqC,OAMjCmB,EAAMM,GAAG,OAAQ,WAGbJ,EACCjD,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAEsD,OAAOb,IACzBhC,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAEsD,OAAOZ,IACzBjC,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAEuD,OAAOd,IACzBhC,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAEuD,OAAOb,IAI1BkB,EACCnD,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAEyC,IAClBhC,KAAK,KAAM,SAAAT,GAAC,OAAIA,EAAE0C,uCAOvB,OAAOjE,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,uBA3IG1C,qBCuGXuF,8LAnGPrF,KAAKsF,8DAKL,IAAM1E,EAAIC,OAAOC,WAA+B,GAAlBD,OAAOC,WAAkC,IAAlBD,OAAOC,WACtDC,EAAIH,EASV,IAAI2E,EAA+B,GAAjB3D,KAAK4D,IAAI5E,EAAGG,GAAW,GACrC0E,EAAcF,EAAc,GAE5BG,EAAcvF,IAAgB,MAAO,KAErCwF,EAAQxF,MACPyF,SAAS,KACTC,cAAc1F,KAEf2F,EAAM3F,MACLsF,YAAYA,GACZF,YAAYA,GAEbQ,EAAS5F,MACR6F,OAAOP,GAERQ,EAAQ9F,MACPkB,OAAOlB,IAAS,IAChBmB,MAAM,CAAC,UAAW,UAAW,UAAW,YAYvC4E,EAASP,EAPD,CACV,CAAC,KAAO,IAAM,IAAM,MACpB,CAAE,IAAM,MAAO,IAAM,MACrB,CAAE,KAAM,MAAO,KAAM,MACrB,CAAE,KAAQ,IAAM,IAAK,QAMrBnE,EAAMrB,IAAU,UACPsB,OAAO,OACPC,KAAK,UAAW,EAAEd,EAAI,GAAIG,EAAI,EAAGH,EAAGG,IACpCW,KAAK,QAASd,GACdc,KAAK,SAAUX,GACfW,KAAK,YAAa,QAEzByE,EAAQ3E,EAAIC,OAAO,KACpBM,UAAU,KACV1B,KAAK6F,EAAOE,QACZpE,QAAQP,OAAO,KAEpB0E,EAAM1E,OAAO,QACRC,KAAK,OAAQ,SAAAT,GAAC,OAAIgF,EAAMhF,EAAEoF,SAC1B3E,KAAK,SAAU,SAAAT,GAAC,OAAId,IAAO8F,EAAMhF,EAAEoF,QAAQC,WAC3C5E,KAAK,IAAKoE,GAEf,IAAMS,EAAYJ,EAAM1E,OAAO,KAC1BM,UAAU,KACV1B,KAAK,SAAAY,GAAC,OA3DX,SAAoBA,EAAGuF,GACnB,IAAMC,GAAKxF,EAAEyF,SAAWzF,EAAE0F,YAAc1F,EAAE2F,MAC1C,OAAOzG,IAAS,EAAGc,EAAE2F,MAAOJ,GAAMK,IAAI,SAAAD,GACpC,MAAO,CAACA,MAAOA,EAAOE,MAAOF,EAAQH,EAAIxF,EAAE0F,cAwDlCI,CAAW9F,EAAG,OACxBe,QAAQP,OAAO,KACfC,KAAK,YAAa,SAAAT,GAAC,gBAAAiB,OAAwB,IAAVjB,EAAE6F,MAAclF,KAAKoF,GAAK,GAAxC,gBAAA9E,OAAyDqD,EAAzD,SAExBgB,EAAU9E,OAAO,QACZC,KAAK,SAAU,QACfA,KAAK,KAAM,GAEhB6E,EAAUU,OAAO,SAAAhG,GAAC,OAAIA,EAAE2F,MAAQ,MAAQ,IACnCnF,OAAO,QACLC,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,YAAa,SAAAT,GAAC,OAAIA,EAAE6F,MAAQlF,KAAKoF,GAAK,6BAA+B,OAC1EtF,KAAK,cAAe,SAAAT,GAAC,OAAIA,EAAE6F,MAAQlF,KAAKoF,GAAK,MAAQ,OACrD/E,KAAK,SAAAhB,GAAC,OAAIyE,EAAYzE,EAAE2F,SAE7BpF,EAAIC,OAAO,KACNC,KAAK,eAAgB,KACvBK,UAAU,QACV1B,KAAK6F,GACLlE,QAAQP,OAAO,QACbC,KAAK,IAAKqE,GACVrE,KAAK,OAAQ,SAAAT,GAAC,OAAIgF,EAAMhF,EAAEuD,OAAO6B,SACjC3E,KAAK,SAAU,SAAAT,GAAC,OAAId,IAAO8F,EAAMhF,EAAEuD,OAAO6B,QAAQC,4CAIzD,OAAO5G,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,wBAlGI1C,aC+EVoH,6MAhEfC,MAAQ,CACNC,MAAO,IACPC,OAAQ,gFAGEC,GACV,OAAOA,GACL,KAAK,EACH,OAAO5H,EAAAC,EAAAC,cAAC2H,EAAD,CAAUlH,KAAMmH,MACzB,KAAK,EACH,OAAO9H,EAAAC,EAAAC,cAAC6H,EAAD,MACT,KAAK,EACH,OAAO/H,EAAAC,EAAAC,cAAC8H,EAAD,CAAarH,KAAMsH,MAC5B,KAAK,EACH,OAAOjI,EAAAC,EAAAC,cAACgI,EAAD,CAAavH,KAAMwH,IAC5B,KAAK,GACH,OAAOnI,EAAAC,EAAAC,cAACkI,EAAD,MACT,QACE,MAAO,4CAKT,OACEpI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcG,KAAKI,MAAM2H,MAAMC,YAE/CtI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,SAASxC,KAAKiI,YAAYjI,KAAKI,MAAM2H,MAAMvF,KACnD9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,WACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYG,KAAKI,MAAM2H,MAAMG,WAI9CxI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYG,KAAKI,MAAM2H,MAAMI,OAC5CzI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aACCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYG,KAAKI,MAAM2H,MAAMK,WAE7C1I,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aACEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYG,KAAKI,MAAM2H,MAAMM,YAIhD3I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAEEG,KAAKI,MAAM2H,MAAMO,QAAQzB,IAAI,SAAStC,GAEpC,OAAO7E,EAAAC,EAAAC,cAAA,KAAG2I,IAAKhE,EAAQiE,KAAMjE,GAASA,cAxD9BzE,qBC8BP2I,mLAhCX,OACE/I,EAAAC,EAAAC,cAAC8I,EAAA,EAAD,KACAhJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAEI+I,EAAU9B,IAAI,SAASkB,GACnB,IAAIa,EAAO,cAAgBb,EAAMC,UAAUa,QAAQ,OAAQ,IAE3D,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAASP,IAAKR,EAAMvF,GAAIuG,GAAIH,GAAMlJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWkI,EAAMvF,GAA/B,MAAsCuF,EAAMC,gBAKjGtI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEX8I,EAAU9B,IAAI,SAASkB,GACnB,IAAIa,EAAO,cAAgBb,EAAMC,UAAUa,QAAQ,OAAQ,IAI3D,OAAOnJ,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOT,IAAKR,EAAMvF,GAAIoG,KAAMA,EAAMK,OAAQ,SAAAC,GAAA,IAAE9I,EAAF8I,EAAE9I,MAAF,OAAaV,EAAAC,EAAAC,cAACuJ,EAADC,OAAAC,OAAA,CAAWtB,MAAOA,GAAW3H,EAA7B,CAAoCkJ,UAAU,oBAzBxGxJ,aCyBPyJ,mLAtBX,OACE7J,EAAAC,EAAAC,cAAC8I,EAAA,EAAD,KACIhJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAASC,GAAG,KAAIrJ,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,OAAOgH,IAAI,mBAAmBC,IAAI,6BAE1D/J,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAASC,GAAG,UAAZ,UACJrJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAASC,GAAG,cAAZ,gBAGhBrJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOU,OAAK,EAACd,KAAK,IAAIe,UAAWlK,IACjCC,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOJ,KAAK,SAASe,UAAWlK,IAChCC,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOJ,KAAK,aAAae,UAAWlB,cAjB/B3I,aC8BN8J,6MA7BbzC,MAAQ,CACN9G,KAAMA,IACN+G,MAAO,IACPC,OAAQ,IACR7E,GAAI,cAGNqH,OAAS,CACPxJ,KAAMyJ,IACN1C,MAAO,IACPC,OAAQ,IACR7E,GAAI,uFAYJ,OACE9C,EAAAC,EAAAC,cAACmK,EAAD,aA1BYjK,aCLlBkK,IAASf,OAAOvJ,EAAAC,EAAAC,cAACqK,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.51242127.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CoffeesPerDay.acc0f34b.csv\";","module.exports = __webpack_public_path__ + \"static/media/CoffeeWake.64721e2b.csv\";","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass About extends Component {  \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n            <div className=\"\">\r\n              <div className=\"about\">\r\n                <div className=\"flexRow column\">\r\n                  <h3 className=\"title chartTitle\">The D.V.C. (Data Visualization Catalogue):</h3>\r\n                  <p className=\"subtitle\">because there are <i>a lot</i> of ways to reach your audience</p>\r\n                </div>\r\n                <div className=\"flexRow\">\r\n                  <div>\r\n                    <h5 className=\"title chartTitle\">Why Data Viz?</h5>\r\n                      <p className=\"subtitle why\">In an increasingly digitally connected world, data is consumed at a frenetic rate. The ability to convey a large amount of data, and how that data relates to itself or other datasets is invaluable. The time of Microsoft Office charts is ending and an era of professionally crafted data visualization is beginning.</p>\r\n                  </div>\r\n                  <div>\r\n                    <h5 className=\"title chartTitle\">Why Catalogues?</h5>\r\n                      <p className=\"subtitle why\">There are a much larger amount of charts than most people are aware of. Some of the lesser known charts, even some that can be very effective in conveying huge datasets and their relationships, are often unused in favor of more wellknown chart formats. This catalogue seeks to serve both visualizers and consumers of data, so that a common ground can be reached between the two rather than a gap of data elitism.</p>\r\n                  </div>\r\n                  <div>\r\n                    <h5 className=\"title chartTitle\">What's d3?</h5>\r\n                      <p className=\"subtitle\">D3 is a Javascript library aimed to make it easier to create digital and interactive data visualizations. Leveraging HTML, SVG and CSS, this library can handle large datasets and complicated visuals effectively.</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default About;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass BarChart extends Component {\r\n\r\n    //display chart after BarChart has been mounted to the DOM\r\n    componentDidMount() {\r\n        this.drawBarChart();\r\n    }\r\n\r\n    drawBarChart() {\r\n\r\n        let parseTime = d3.timeParse('%Y-%m-%d %H:%M:%S');\r\n\r\n        //parse data\r\n        d3.csv(this.props.data, (row) => {\r\n            return {\r\n            coffees: parseInt(row.coffees), \r\n            date_time: parseTime(row.date_time)\r\n            }\r\n        }).then((dataset) => {\r\n            \r\n            // let's use console.log with the dataset so that we can inspect\r\n            // the values in the Javascript Console\r\n            //console.table(dataset);\r\n\r\n            const w = window.innerWidth - window.innerWidth*.5 - 100;\r\n            const h = window.innerWidth - window.innerWidth*.65 - 100;\r\n\r\n            // let's get the min and max values for both coffees and wake_time\r\n            //let coffeeMin = d3.min(dataset, (d) => d.coffees);\r\n            let coffeeMax = d3.max(dataset, (d) => d.coffees);\r\n            let dateMin = d3.min(dataset, (d) => d.date_time);\r\n            let dateMax = d3.max(dataset, (d) => d.date_time);\r\n\r\n            // xscale\r\n            let xScale = d3.scaleTime()\r\n                            .domain([dateMin, dateMax])  \r\n                            .range([20, w - 10])\r\n                            //.rangeRound([20, w - 20])\r\n\r\n            // let's flip the y-values for output here\r\n            let yScale = d3.scaleLinear()\r\n                            .domain([0, coffeeMax])  \r\n                            .range([h - 20, 20]);\r\n                            //.rangeRound([h - 20, 20]);\r\n\r\n            // now create an svg element\r\n            let svg = d3.select('#chart')\r\n                        .append('svg')\r\n                        .attr('width', w)   // setup width and height of svg to start\r\n                        .attr('height', h); \r\n                    \r\n            let barWidth = Math.floor((w - 40) / dataset.length) - 4;\r\n\r\n            svg.selectAll('rect')\r\n                .data(dataset)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('x', (d) => xScale(d.date_time))        \r\n                .attr('y', (d) => yScale(d.coffees))  \r\n                .attr('width', barWidth)\r\n                .attr('height', (d) => (h - 20) - yScale(d.coffees))\r\n                .attr('fill', '#F15A29')\r\n                .attr('transform', `translate(10,0)`);\r\n\r\n            svg.selectAll('text')\r\n                .data(dataset)\r\n                .enter()\r\n                .append('text')\r\n                .attr('text-anchor', 'middle')\r\n                .attr('font-size', '12px')\r\n                .attr('x', (d) => xScale(d.date_time) + (barWidth / 2))\r\n                .attr('y', (d) => yScale(d.coffees) - 6)  \r\n                .text((d) => `${d.coffees}`)\r\n                .attr('transform', `translate(10,0)`);\r\n\r\n            // AXES\r\n\r\n            let xAxis = d3.axisBottom()\r\n                            .ticks(4)\r\n                            .scale(xScale);\r\n\r\n            svg.append('g')\r\n                .attr('class','axis')\r\n                .attr('transform', `translate(10,${h - 20})`)\r\n                .call(xAxis);\r\n\r\n\r\n            let yAxis = d3.axisLeft()\r\n                            .scale(yScale);\r\n\r\n            svg.append('g')\r\n                .attr('class','axis')\r\n                .attr('transform', `translate(30,0)`)\r\n                .call(yAxis);\r\n\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return <div id=\"barchart\"></div>\r\n    }\r\n\r\n}\r\n\r\nexport default BarChart;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass LineChart extends Component {\r\n\r\n    //display chart after BarChart has been mounted to the DOM\r\n    componentDidMount() {\r\n        this.drawLineChart();\r\n    }\r\n\r\n    drawLineChart() {\r\n\r\n        let dataset = [];\r\n        // let dataset = [\r\n        //     {name: Emily, lineData: \r\n        //         [\r\n        //             {sleep: 8.875675010127162, date: 2018-04-01 00:000:00},\r\n        //             {sleep: 11.118854427953568, date: 2018-05-01 00:000:00},\r\n        //             {sleep: 8.875675010127162, date: 2018-06-01 00:000:00}\r\n        //         ]},\r\n        //     {name: Nana, lineData: \r\n        //         [\r\n        //             {sleep: 6.298880680203134, date: 2018-04-01 00:000:00},\r\n        //             {sleep: 10.104478959952603, date: 2018-05-01 00:000:00},\r\n        //             {sleep: 4.395622588594357, date: 2018-06-01 00:000:00}\r\n        //         ]},\r\n        //     {name: Zoe, lineData: \r\n        //         [\r\n        //             {sleep: 10.278185230166667, date: 2018-04-01 00:000:00},\r\n        //             {sleep: 2.5954652438753483, date: 2018-05-01 00:000:00},\r\n        //             {sleep: 10.983510056402753, date: 2018-06-01 00:000:00}\r\n        //         ]}\r\n        // ]\r\n\r\n        for(let i = 0; i < 3; i++) {\r\n        let lineData = []\r\n        for(let j = 0; j < 3; j++) {\r\n            let datum = {\r\n            sleep: 2 + Math.random() * 10,\r\n            date: new Date(2018, j)\r\n            };\r\n            console.log(datum.date);\r\n            lineData.push(datum);\r\n        }\r\n        let datum = {\r\n            name: `Person ${i}`, \r\n            lineData: lineData\r\n        };\r\n        dataset.push(datum);\r\n        }\r\n\r\n        console.log(dataset);\r\n            \r\n        // let's use console.log with the dataset so that we can inspect\r\n        // the values in the Javascript Console\r\n        //console.table(dataset);\r\n\r\n        const w = window.innerWidth - window.innerWidth*.5 - 100;\r\n        const h = window.innerWidth - window.innerWidth*.65 - 100;\r\n\r\n        // now create an svg element\r\n        let svg = d3.select('#chart')\r\n                    .append('svg')\r\n                    .attr('width', w)   // setup width and height of svg to start\r\n                    .attr('height', h); \r\n\r\n        let xScale = d3\r\n            .scaleTime()\r\n            .domain(d3.extent(dataset[0].lineData, d => d.date))    /// FIXME\r\n            .range([30, w - 20]);\r\n\r\n        let yScale = d3\r\n            .scaleLinear()\r\n            .domain([0, 12])\r\n            .range([h - 20, 20]);\r\n\r\n        // create our x-axis and customize look with .ticks() and\r\n        // .tickFormat()\r\n        let xAxis = d3.axisBottom(xScale)\r\n            .tickFormat(d3.timeFormat(\"%m/%y\"));\r\n\r\n        let xAxisGroup = svg.append(\"g\")\r\n            .attr(\"transform\", `translate(0, ${h - 20})`)\r\n            .call(xAxis);\r\n\r\n        let yAxis = d3.axisLeft(yScale);\r\n        let yAxisGroup = svg.append(\"g\")\r\n              .attr(\"transform\", `translate(30, 0)`)\r\n              .call(yAxis);\r\n          \r\n        var colors = d3.scaleOrdinal()\r\n              .domain([\"moss\", \"dreary\", \"aqua\"])\r\n              .range([\"#DA1C5C\", \"#F15A29\" , \"#00AEEF\"]);\r\n        \r\n        /* LINE CHART CODE */\r\n\r\n        // draw the lines using SVG path elements\r\n        // You should use one .selectAll(), .data(), .enter() sequence\r\n        // here to generate all of your lines\r\n\r\n        let line = d3.line()\r\n            .x(function(d) { return xScale(d.date); })\r\n            .y(function(d) { return yScale(d.sleep); });\r\n\r\n        svg.selectAll('.line')\r\n            .data(dataset)\r\n            .enter()\r\n            .append('path')\r\n                .attr('class', 'line')\r\n                .attr(\"stroke\", (d,i) => colors(i) )\r\n                .attr('d', d => line(d.lineData));      \r\n        \r\n    }\r\n\r\n    render(){\r\n        return <div id='#linechart'></div>\r\n    }\r\n\r\n}\r\n\r\nexport default LineChart;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass ScatterPlot extends Component {\r\n\r\n    //display chart after BarChart has been mounted to the DOM\r\n    componentDidMount() {\r\n        this.drawScatterChart();\r\n    }\r\n\r\n    drawScatterChart() {\r\n\r\n        // console.log(\"original data\");\r\n        // console.table(this.props.data);\r\n\r\n        //parse data\r\n        d3.csv(this.props.data, (row) => {\r\n            return {\r\n                coffees: parseFloat(row.coffees),\r\n                wake_time: parseFloat(row.wake_time),\r\n            }\r\n        }).then((dataset) => {\r\n            \r\n            // let's use console.log with the dataset so that we can inspect\r\n            // the values in the Javascript Console\r\n            //console.table(dataset);\r\n\r\n            const w = window.innerWidth - window.innerWidth*.5 - 100;\r\n            const h = window.innerWidth - window.innerWidth*.65 - 100;\r\n\r\n            // let's get the min and max values for both coffees and wake_time\r\n            let coffeeMin = d3.min(dataset, (d) => d.coffees);\r\n            let coffeeMax = d3.max(dataset, (d) => d.coffees);\r\n            let wakeMin = d3.min(dataset, (d) => d.wake_time);\r\n            let wakeMax = d3.max(dataset, (d) => d.wake_time);\r\n\r\n            let xScale = d3.scaleLinear()\r\n                  .domain([coffeeMin + 1.5, coffeeMax + .1])\r\n                  .rangeRound([20, w - 20]);\r\n\r\n            let yScale = d3.scaleLinear()\r\n                        .domain([wakeMin, wakeMax])\r\n                        .rangeRound([h - 20, 20]);\r\n                        \r\n            let rScale = d3.scaleSqrt()\r\n                        .domain([0, coffeeMax])\r\n                        .range([0,5]);\r\n\r\n            // now create an svg element\r\n            let svg = d3.select('#chart')\r\n                        .append('svg')\r\n                        .attr('width', w)   // setup width and height of svg to start\r\n                        .attr('height', h); \r\n            \r\n            svg.selectAll('circle')\r\n                .data(dataset)\r\n                .enter()\r\n                .append('circle')\r\n                .attr('cx', (d) => xScale(d.coffees))\r\n                .attr('cy', (d) => yScale(d.wake_time))\r\n                .attr('fill', '#F15A29')\r\n                .attr('r', (d) => rScale(d.coffees));\r\n            \r\n            \r\n            svg.selectAll('text')\r\n                .data(dataset)\r\n                .enter()\r\n                .append('text')\r\n                .attr('text-anchor', 'middle')\r\n                .attr('font-size', 10)\r\n                .attr('x', (d) => xScale(d.coffees))\r\n                .attr('y', (d) => yScale(d.wake_time) - 8)\r\n                .text((d) => `(${d.coffees},${d.wake_time})`);       \r\n\r\n            // AXES\r\n\r\n            let xAxis = d3.axisBottom()\r\n                            .ticks(4)\r\n                            .scale(xScale);\r\n\r\n            svg.append('g')\r\n                .attr('class','axis')\r\n                .attr('transform', `translate(10,${h - 20})`)\r\n                .call(xAxis);\r\n\r\n\r\n            let yAxis = d3.axisLeft()\r\n                            .scale(yScale);\r\n\r\n            svg.append('g')\r\n                .attr('class','axis')\r\n                .attr('transform', `translate(30,0)`)\r\n                .call(yAxis);\r\n            })\r\n        \r\n    }\r\n\r\n    render(){\r\n        return <div id=\"scatterplot\"></div>\r\n    }\r\n\r\n}\r\n\r\nexport default ScatterPlot;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass ForceDirect extends Component {\r\n\r\n    //display chart after BarChart has been mounted to the DOM\r\n    componentDidMount() {\r\n        this.drawForceDirect();\r\n    }\r\n\r\n\r\n    \r\n\r\n    drawForceDirect() {\r\n\r\n        // EVENT HANDLING FUNCTIONS\r\n        // (these come straight from \"Interactive Data Visualization for the Web\", Ch 13, \"Draggable Nodes\")\r\n        function onDragStart(d) {\r\n            if(!d3.event.active) {\r\n            force.alphaTarget(0.3).restart();\r\n            }\r\n            // use fx and fy as fixed x and y values; when set, overrides computed x/y\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n        \r\n        function onDrag(d) {\r\n            // set fx and fy to event x/y \r\n            d.fx = d3.event.x;\r\n            d.fy = d3.event.y;\r\n        }\r\n        \r\n        function onDragEnd(d) {\r\n            if(!d3.event.active) {\r\n            force.alphaTarget(1).restart();\r\n            }\r\n            // clear fx and fy so that computed x/y is used once again\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n\r\n        let dataset = {\r\n            nodes: [\r\n              {name: 'Lara Jean'},   // 0\r\n              {name: 'Peter'},      // 1\r\n              {name: 'Margot'},           // 2\r\n              {name: 'Kitty'},            // 3\r\n              {name: 'Christine'},           // 4\r\n              {name: 'Gen'},         // 5\r\n              {name: 'Josh'},    // 6\r\n              {name: 'Emily'},    // 7\r\n              {name: 'Greg'}    // 8\r\n            ], \r\n            edges: [\r\n              { source: 0, target: 1},\r\n              { source: 0, target: 2},\r\n              { source: 0, target: 3},\r\n              { source: 0, target: 4},\r\n              { source: 0, target: 5},\r\n              { source: 0, target: 6},\r\n              { source: 1, target: 5},\r\n              { source: 2, target: 3},\r\n              { source: 2, target: 6},\r\n              { source: 3, target: 6},\r\n              { source: 4, target: 5},\r\n              { source: 5, target: 7},\r\n              { source: 1, target: 8},\r\n            ] \r\n          } \r\n\r\n        const w = window.innerWidth - window.innerWidth*.5 - window.innerWidth*.25;\r\n        const h = w;\r\n            \r\n        // now create an svg element\r\n        let svg = d3.select('#chart')\r\n                    .append('svg')\r\n                    .attr('width', w)   // setup width and height of svg to start\r\n                    .attr('height', h)\r\n                    .attr(\"font-size\", \".5em\");\r\n                        \r\n        // create D3 force layout that converts \r\n        // dataset into a simulation for force-directed graphs \r\n        // The simulation will have it's own derived dataset internally.\r\n        let linkTargetLength = 100;\r\n        let force = d3.forceSimulation(dataset.nodes)\r\n                        .force('charge', d3.forceManyBody())\r\n                        .force('link', d3.forceLink(dataset.edges)\r\n                                        .distance(linkTargetLength))\r\n                        .force('center', d3.forceCenter()\r\n                                        .x(w/2)\r\n                                        .y(h/2));\r\n\r\n        // CREATE THE VISUAL\r\n        // We first create the base items for the edges (the connection lines)\r\n        // and nodes (circles) and configure for static properties. \r\n\r\n        let edges = svg.selectAll('line')\r\n                        .data(dataset.edges)\r\n                        .enter()\r\n                        .append('line')\r\n                        .classed('edge', true);\r\n\r\n        let nodes = svg.selectAll('circle')\r\n                        .data(dataset.nodes)\r\n                        .enter()\r\n                        .append('circle')\r\n                        .attr('r', 15)\r\n                        .style('fill', (d,i) => (i < 2) ? '#DA1C5C' : '#F15A29')\r\n                        .call(d3.drag()\r\n                                .on('start', onDragStart)\r\n                                .on('drag', onDrag)\r\n                                .on('end', onDragEnd));\r\n                        \r\n        // append title elements for all nodes, giving us tooltips\r\n        nodes.append('title')\r\n            .classed('forcelabel', true)\r\n            .text(function(d) { return d.name; });\r\n\r\n        // Next we deal with dynamic properties using the forceSimulation. \r\n        // We do this by setting what happens when the forceSimulation 'ticks'\r\n        // when running. \r\n\r\n        force.on('tick', () => {\r\n            // update edge line's starting and ending x/y using the \r\n            // joined data that D3 derived from our dataset\r\n            edges\r\n            .attr('x1', d => d.source.x)\r\n            .attr('y1', d => d.source.y)\r\n            .attr('x2', d => d.target.x)\r\n            .attr('y2', d => d.target.y);\r\n\r\n            // update node center x/y's using the \r\n            // joined data that D3 derived from our dataset\r\n            nodes \r\n            .attr('cx', d => d.x)\r\n            .attr('cy', d => d.y);\r\n\r\n        })\r\n\r\n    }\r\n\r\n    render(){\r\n        return <div id=\"forcedirect\"></div>\r\n    }\r\n\r\n}\r\n\r\nexport default ForceDirect;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass ChordDiagram extends Component {\r\n\r\n    //display chart after BarChart has been mounted to the DOM\r\n    componentDidMount() {\r\n        this.drawChordDiagram();\r\n    }\r\n\r\n    drawChordDiagram() {\r\n\r\n        const w = window.innerWidth - window.innerWidth*.5 - window.innerWidth*.25;\r\n        const h = w;\r\n\r\n        function groupTicks(d, step) {\r\n            const k = (d.endAngle - d.startAngle) / d.value;\r\n            return d3.range(0, d.value, step).map(value => {\r\n              return {value: value, angle: value * k + d.startAngle};\r\n            });\r\n        };\r\n\r\n        let outerRadius = Math.min(w, h) * 0.5 - 30;\r\n        let innerRadius = outerRadius - 20;\r\n\r\n        let formatValue = d3.formatPrefix(\",.0\", 1e3);\r\n\r\n        let chord = d3.chord()\r\n            .padAngle(0.05)\r\n            .sortSubgroups(d3.descending);\r\n\r\n        let arc = d3.arc()\r\n            .innerRadius(innerRadius)\r\n            .outerRadius(outerRadius);\r\n\r\n        let ribbon = d3.ribbon()\r\n            .radius(innerRadius);\r\n\r\n        let color = d3.scaleOrdinal()\r\n            .domain(d3.range(4))\r\n            .range([\"#00AEEF\", \"#F15A29\", \"#8DC63F\", \"#DA1C5C\"]);\r\n\r\n        \r\n\r\n        //https://beta.observablehq.com/@mbostock/d3-chord-diagram\r\n        let dataset = [\r\n            [1200,  3000, 8000, 1500],\r\n            [ 3000, 12050, 4000, 8390],\r\n            [ 5680, 14678, 8090, 5720],\r\n            [ 3721,   990,  780, 6987]\r\n          ]\r\n\r\n        const chords = chord(dataset);\r\n\r\n        // now create an svg element\r\n        let svg = d3.select('#chart')\r\n                    .append('svg')\r\n                    .attr(\"viewBox\", [-w / 2, -h / 2, w, h])\r\n                    .attr('width', w)   // setup width and height of svg to start\r\n                    .attr('height', h)\r\n                    .attr(\"font-size\", \".5em\");    \r\n        \r\n        const group = svg.append(\"g\")\r\n            .selectAll(\"g\")\r\n            .data(chords.groups)\r\n            .enter().append(\"g\");\r\n\r\n        group.append(\"path\")\r\n            .attr(\"fill\", d => color(d.index))\r\n            .attr(\"stroke\", d => d3.rgb(color(d.index)).darker())\r\n            .attr(\"d\", arc);\r\n\r\n        const groupTick = group.append(\"g\")\r\n            .selectAll(\"g\")\r\n            .data(d => groupTicks(d, 1e3))\r\n            .enter().append(\"g\")\r\n            .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90}) translate(${outerRadius},0)`);\r\n\r\n        groupTick.append(\"line\")\r\n            .attr(\"stroke\", \"#000\")\r\n            .attr(\"x2\", 6);\r\n\r\n        groupTick.filter(d => d.value % 5e3 === 0)\r\n            .append(\"text\")\r\n              .attr(\"x\", 8)\r\n              .attr(\"dy\", \".35em\")\r\n              .attr(\"transform\", d => d.angle > Math.PI ? \"rotate(180) translate(-16)\" : null)\r\n              .attr(\"text-anchor\", d => d.angle > Math.PI ? \"end\" : null)\r\n              .text(d => formatValue(d.value));\r\n        \r\n          svg.append(\"g\")\r\n              .attr(\"fill-opacity\", 0.67)\r\n            .selectAll(\"path\")\r\n            .data(chords)\r\n            .enter().append(\"path\")\r\n              .attr(\"d\", ribbon)\r\n              .attr(\"fill\", d => color(d.target.index))\r\n              .attr(\"stroke\", d => d3.rgb(color(d.target.index)).darker());\r\n    }\r\n\r\n    render(){\r\n        return <div id=\"chorddiagram\"></div>\r\n    }\r\n\r\n}\r\n\r\nexport default ChordDiagram;","import React, { Component } from 'react';\r\n// 1 //barchart\r\nimport bardata from './datasets/CoffeesPerDay.csv';\r\nimport BarChart from './charts/BarChart';\r\n// 2 //line chart\r\nimport LineChart from './charts/LineChart';\r\n// 4 //scatter chart\r\nimport ScatterPlot from './charts/ScatterPlot';\r\nimport scatterdata from './datasets/CoffeeWake.csv';\r\n// 9 // force directed\r\nimport ForceDirect from './charts/ForceDirect';\r\nimport forcedata from './datasets/test.json';\r\n// 10 //chord diagram\r\nimport ChordDiagram from './charts/ChordDiagram';\r\nimport './App.css';\r\n\r\nclass Chartview extends Component {  \r\n\r\n  state = {\r\n    width: 500,\r\n    height: 300,\r\n}\r\n\r\n  switchChart(param){\r\n    switch(param) {\r\n      case 1:\r\n        return <BarChart data={bardata}/>;\r\n      case 2:\r\n        return <LineChart/>;\r\n      case 4:\r\n        return <ScatterPlot data={scatterdata}/>;\r\n      case 9:\r\n        return <ForceDirect data={forcedata}/>;\r\n      case 10:\r\n        return <ChordDiagram/>;\r\n      default:\r\n        return 'default';\r\n    }\r\n  }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"flexRow\">\r\n            <h2 className=\"chartTitle\">{this.props.chart.charttype}</h2>\r\n          </div>\r\n          <div className=\"flexRow\">\r\n            <div id='chart'>{this.switchChart(this.props.chart.id)}</div>\r\n            <div className=\"summary\">\r\n              <h5 className=\"sumtitle\">Summary</h5>\r\n              <p className=\"subtitle\">{this.props.chart.summary}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flexRow\">\r\n            <div className=\"markschannels\">\r\n              <h5 className=\"title\">Marks:</h5> \r\n                <p className=\"subtitle\">{this.props.chart.marks}</p>\r\n              <h5 className=\"title\">Channels:</h5>\r\n               <p className=\"subtitle\">{this.props.chart.channels}</p>\r\n            </div>\r\n            <div>\r\n              <h5 className=\"title\">Analysis:</h5>\r\n                <p className=\"subtitle\">{this.props.chart.analysis}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flexRow column\">\r\n            <h5 className=\"title\">References:</h5>\r\n            {\r\n              this.props.chart.sources.map(function(source){\r\n                //console.log(source);\r\n                return <a key={source} href={source}>{source}</a>;\r\n              })\r\n            }\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Chartview;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n  } from \"react-router-dom\";\r\nimport Chartview from \"./Chartview\";\r\nimport allcharts from \"./allcharts.json\";\r\n\r\nclass Catalogue extends Component {  \r\n  \r\n    render() {\r\n\r\n      return (\r\n        <HashRouter>\r\n        <div className=\"flexRow\">\r\n            <div className=\"nav\">\r\n                <ul>\r\n                    {\r\n                    allcharts.map(function(chart){\r\n                        let path = \"/catalogue/\" + chart.charttype.replace(/\\s+/g, '');\r\n                        //console.log(\"path to: \" + path);\r\n                        return <NavLink key={chart.id} to={path}><li className=\"navItem\">{chart.id} - {chart.charttype}</li></NavLink>;\r\n                    })\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div className=\"chartinfo\">\r\n                {\r\n                allcharts.map(function(chart){\r\n                    let path = \"/catalogue/\" + chart.charttype.replace(/\\s+/g, '');\r\n                    //console.log(chart);\r\n                    //console.log(path);\r\n                    //return <Route key={chart.id} path={path} component={Chartview}/>\r\n                    return <Route key={chart.id} path={path} render={({props}) => <Chartview chart={chart} {...props} isAuthed={true} />}\r\n/>;\r\n                })\r\n                }\r\n            </div>\r\n        </div>\r\n        </HashRouter>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Catalogue;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n  } from \"react-router-dom\";\r\n  import About from \"./About\";\r\n  import Catalogue from \"./Catalogue\";\r\n\r\nclass Header extends Component {  \r\n  \r\n    render() {\r\n      return (\r\n        <HashRouter>\r\n            <div>\r\n                <div className=\"flexRow header\">\r\n                    <NavLink to=\"/\"><img id=\"logo\" src=\"/assets/logo.png\" alt=\"data viz catalogue logo\"></img></NavLink>\r\n                    {/* <h3>Data Visualization Catalogue</h3> */}\r\n                    <ul>\r\n                        <li><NavLink to=\"/about\">About</NavLink></li>\r\n                        <li><NavLink to=\"/catalogue\">Catalogue</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            <div className=\"content\">\r\n                <Route exact path=\"/\" component={About}/>\r\n                <Route path=\"/about\" component={About}/>\r\n                <Route path=\"/catalogue\" component={Catalogue}/>\r\n            </div>\r\n            </div>\r\n        </HashRouter>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Header;","import React, { Component } from 'react';\n//import BarChart from './charts/BarChart';\n//import ScatterPlot from './charts/ScatterPlot';\n//import LineChart from './charts/LineChart';\nimport Header from \"./Header\";\nimport data from './datasets/CoffeesPerDay.csv';\nimport data2 from './datasets/CoffeeWake.csv';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    data: data,\n    width: 500,\n    height: 300,\n    id: \"barchart\"\n  }\n\n  state2 = {\n    data: data2,\n    width: 500,\n    height: 300,\n    id: \"scatterplot\"\n  }\n\n  //saved working code for showing graphs\n  // <div className=\"App\">\n  //   <BarChart data={this.state.data} width={this.state.width} height={this.state.height} id={this.state.id} />\n  //   <ScatterPlot data={this.state2.data} width={this.state2.width} height={this.state2.height} id={this.state2.id} />\n  //   <LineChart width={this.state2.width} height={this.state2.height} id=\"linechart\" />\n  // </div>\n\n\n  render() {\n    return (\n      <Header/>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}